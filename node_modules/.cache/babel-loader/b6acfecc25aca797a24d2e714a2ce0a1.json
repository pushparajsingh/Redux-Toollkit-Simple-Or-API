{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  value: 0\n};\nexport const Api = createAsyncThunk(\"posts/getPost\", () => {\n  fetch(\"https://jsonplaceholder.typicode.com/posts\").then(item => {\n    item.json();\n  }).catch();\n});\nexport const counterSlice = createSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  }\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  increment,\n  decrement,\n  incrementByAmount\n} = counterSlice.actions;\nexport default counterSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","initialState","value","Api","fetch","then","item","json","catch","counterSlice","name","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","reducer"],"sources":["/home/pushparajsigh/Desktop/practice/redux-toolkit by pushparaj/src/features/counter/counterSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  value: 0,\n};\nexport const Api = createAsyncThunk(\"posts/getPost\",()=>{\n\n   fetch(\"https://jsonplaceholder.typicode.com/posts\").then((item)=>{\n\n   item.json()\n   }).catch();\n})\n\n\n\nexport const counterSlice = createSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\nexport default counterSlice.reducer;\n"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AAEA,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE;AADY,CAArB;AAGA,OAAO,MAAMC,GAAG,GAAGJ,gBAAgB,CAAC,eAAD,EAAiB,MAAI;EAErDK,KAAK,CAAC,4CAAD,CAAL,CAAoDC,IAApD,CAA0DC,IAAD,IAAQ;IAEjEA,IAAI,CAACC,IAAL;EACC,CAHD,EAGGC,KAHH;AAIF,CANkC,CAA5B;AAUP,OAAO,MAAMC,YAAY,GAAGT,WAAW,CAAC;EACtCU,IAAI,EAAE,SADgC;EAEtCT,YAFsC;EAGtCU,QAAQ,EAAE;IACRC,SAAS,EAAGC,KAAD,IAAW;MACpB;MACA;MACA;MACA;MACAA,KAAK,CAACX,KAAN,IAAe,CAAf;IACD,CAPO;IAQRY,SAAS,EAAGD,KAAD,IAAW;MACpBA,KAAK,CAACX,KAAN,IAAe,CAAf;IACD,CAVO;IAWRa,iBAAiB,EAAE,CAACF,KAAD,EAAQG,MAAR,KAAmB;MACpCH,KAAK,CAACX,KAAN,IAAec,MAAM,CAACC,OAAtB;IACD;EAbO;AAH4B,CAAD,CAAhC,C,CAoBP;;AACA,OAAO,MAAM;EAAEL,SAAF;EAAaE,SAAb;EAAwBC;AAAxB,IAA8CN,YAAY,CAACS,OAAjE;AAEP,eAAeT,YAAY,CAACU,OAA5B"},"metadata":{},"sourceType":"module"}