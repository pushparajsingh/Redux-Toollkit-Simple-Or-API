{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  value: 0\n};\nexport const getApi = createAsyncThunk(\"posts/getPost\", () => {\n  return fetch(\"https://jsonplaceholder.typicode.com/posts\").then(item => item.json()).then(result => {// console.log(result);\n  }).catch(error => console.log(\"error\"));\n});\nexport const counterSlice = createSlice({\n  name: \"counter\",\n  initialState,\n  loading: false,\n  error: null,\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  },\n  extraReducers: {\n    [getApi.pending]: (state, action) => {\n      state.loading = true;\n    },\n    [getApi.fulfilled]: (state, action) => {\n      state.loading = false;\n      state.data = action.payload;\n    },\n    [getApi.rejected]: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    }\n  }\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  increment,\n  decrement,\n  incrementByAmount\n} = counterSlice.actions;\nexport default counterSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","initialState","value","getApi","fetch","then","item","json","result","catch","error","console","log","counterSlice","name","loading","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","pending","fulfilled","data","rejected","actions","reducer"],"sources":["/home/pushparajsigh/Desktop/practice/redux-toolkit by pushparaj/src/features/counter/counterSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  value: 0,\n};\nexport const getApi = createAsyncThunk(\"posts/getPost\", () => {\n  return fetch(\"https://jsonplaceholder.typicode.com/posts\")\n    .then((item) => item.json())\n    .then((result) => {\n      // console.log(result);\n    })\n    .catch((error) => console.log(\"error\"));\n});\n\nexport const counterSlice = createSlice({\n  name: \"counter\",\n  initialState,\n  \n  loading: false,\n  error: null,\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  extraReducers: {\n    [getApi.pending]: (state, action) => {\n      state.loading = true;\n    },\n    [getApi.fulfilled]: (state, action) => {\n      state.loading = false;\n      state.data = action.payload;\n    },\n    [getApi.rejected]: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\nexport default counterSlice.reducer;\n"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AAEA,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE;AADY,CAArB;AAGA,OAAO,MAAMC,MAAM,GAAGJ,gBAAgB,CAAC,eAAD,EAAkB,MAAM;EAC5D,OAAOK,KAAK,CAAC,4CAAD,CAAL,CACJC,IADI,CACEC,IAAD,IAAUA,IAAI,CAACC,IAAL,EADX,EAEJF,IAFI,CAEEG,MAAD,IAAY,CAChB;EACD,CAJI,EAKJC,KALI,CAKGC,KAAD,IAAWC,OAAO,CAACC,GAAR,CAAY,OAAZ,CALb,CAAP;AAMD,CAPqC,CAA/B;AASP,OAAO,MAAMC,YAAY,GAAGb,WAAW,CAAC;EACtCc,IAAI,EAAE,SADgC;EAEtCb,YAFsC;EAItCc,OAAO,EAAE,KAJ6B;EAKtCL,KAAK,EAAE,IAL+B;EAMtCM,QAAQ,EAAE;IACRC,SAAS,EAAGC,KAAD,IAAW;MACpB;MACA;MACA;MACA;MACAA,KAAK,CAAChB,KAAN,IAAe,CAAf;IACD,CAPO;IAQRiB,SAAS,EAAGD,KAAD,IAAW;MACpBA,KAAK,CAAChB,KAAN,IAAe,CAAf;IACD,CAVO;IAWRkB,iBAAiB,EAAE,CAACF,KAAD,EAAQG,MAAR,KAAmB;MACpCH,KAAK,CAAChB,KAAN,IAAemB,MAAM,CAACC,OAAtB;IACD;EAbO,CAN4B;EAqBtCC,aAAa,EAAE;IACb,CAACpB,MAAM,CAACqB,OAAR,GAAkB,CAACN,KAAD,EAAQG,MAAR,KAAmB;MACnCH,KAAK,CAACH,OAAN,GAAgB,IAAhB;IACD,CAHY;IAIb,CAACZ,MAAM,CAACsB,SAAR,GAAoB,CAACP,KAAD,EAAQG,MAAR,KAAmB;MACrCH,KAAK,CAACH,OAAN,GAAgB,KAAhB;MACAG,KAAK,CAACQ,IAAN,GAAaL,MAAM,CAACC,OAApB;IACD,CAPY;IAQb,CAACnB,MAAM,CAACwB,QAAR,GAAmB,CAACT,KAAD,EAAQG,MAAR,KAAmB;MACpCH,KAAK,CAACH,OAAN,GAAgB,KAAhB;MACAG,KAAK,CAACR,KAAN,GAAcW,MAAM,CAACC,OAArB;IACD;EAXY;AArBuB,CAAD,CAAhC,C,CAoCP;;AACA,OAAO,MAAM;EAAEL,SAAF;EAAaE,SAAb;EAAwBC;AAAxB,IAA8CP,YAAY,CAACe,OAAjE;AAEP,eAAef,YAAY,CAACgB,OAA5B"},"metadata":{},"sourceType":"module"}